# -*- coding: utf-8 -*-
"""b3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pfyhfcwTkcYBJXOMi7dydAM0T_iF2Evj
"""

import numpy as np
import pandas as pd



filename = 'iris.data'
df = pd.read_csv(filename)
df.head(5)
# print(df.values[:2])



print(df.shape)

names=list(df.columns)

types=df.dtypes

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
for i in range(len(types)):
  if types[i]=='object':
    le.fit_transform(df[names[i]])
    df[names[i]]=le.transform(df[names[i]])

data=df.values
print(data[:2])

X= data[:,:-1]
y= data[:,-1]
print(X.shape)
print(y.shape)

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
scaler.fit(X)
X_scaled=scaler.transform(X)
print(X_scaled[0])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = \
train_test_split(X, y, test_size=0.25, random_state=42)

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors=3)
# training process
model.fit(X_train, y_train)

y_pred = model.predict(X_test)# dự đoán
error=0
for i in range(len(X_test)):
    if y_test[i]!=y_pred[i]:
        error+=1
print(error)


from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

# 
from sklearn.naive_bayes import MultinomialNB
modelNB=MultinomialNB()
modelNB.fit(X_train,y_train)

y_pred=modelNB.predict(X_test)

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))



